{"ast":null,"code":"var _jsxFileName = \"/Users/gustavnielsen/Documents/Kode.nosync/tiktokgame/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Matter from 'matter-js';\nimport bombImage from './assets/2dbomb.png';\n//import testProfilePic from './assets/profilepicture.jpg'\nimport explosion from './assets/explosion.wav';\nimport ding from './assets/ding.mp3';\nimport footstep from './assets/footstep.wav';\nimport popup from './assets/popup.wav';\nimport { useEffect, useState } from 'react';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport Leaderboard from './components/Leaderboard';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport Timer from './components/Timer';\n// spil minecraft soundtrack\n// elevenlabs til lyd. D-Id til video. Måske bruge heygen. \n// Når folk joiner brug https://responsivevoice.org/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //const video = require('./assets/Game_starting_soon.mp4')\n  const [showWinner, setShowWinner] = useState(false);\n  const [latestWinner, setLatestWinner] = useState('not found');\n  const [gameHasStarted, setGameHaStarted] = useState(false);\n  const [confetti, setConfetti] = useState(false);\n  const [world, setWorld] = useState();\n  const [winners, setWinners] = useState([]);\n  const canvasWidth = 200;\n  const canvasHeight = 1000;\n  function createGame() {\n    const engine = Matter.Engine.create();\n    engine.gravity.y = 0;\n    const world = engine.world;\n    setWorld(world);\n    const render = Matter.Render.create({\n      element: document.body,\n      engine: engine,\n      options: {\n        width: canvasWidth,\n        height: canvasHeight,\n        showAngleIndicator: true,\n        showCollisions: true,\n        hasBounds: true,\n        wireframes: false,\n        background: '#fff'\n      }\n    });\n    Matter.Render.run(render);\n\n    // create runner\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n    const wallThichness = 1;\n    Matter.Composite.add(world, [\n    // walls - Created with (xpos, ypos, width, height)\n    Matter.Bodies.rectangle(canvasWidth / 2, 0, canvasWidth, wallThichness, {\n      isStatic: true\n    }),\n    // Top\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight, canvasWidth, wallThichness, {\n      isStatic: true\n    }),\n    // Bottom\n    Matter.Bodies.rectangle(0, canvasHeight / 2, wallThichness, canvasHeight, {\n      isStatic: true\n    }),\n    // Left\n    Matter.Bodies.rectangle(0, canvasHeight / 2, 50, canvasHeight, {\n      isStatic: true,\n      render: {\n        fillStyle: \"grey\"\n      },\n      collisionFilter: {\n        category: 0x0002\n      }\n    }),\n    // Start object. Up to 32 different collision categories. 0x0001 is default\n    Matter.Bodies.rectangle(canvasWidth, canvasHeight / 2, 50, canvasHeight, {\n      isStatic: true,\n      render: {\n        fillStyle: \"green\"\n      }\n    }) // Right - Finish line. \n    ]);\n    // checking collision on finish line\n    Matter.Events.on(engine, 'collisionStart', function (event) {\n      const pairs = event.pairs;\n      // change object colours to show those starting a collision\n      var pair = pairs[0];\n      if (pair.bodyA.render.fillStyle === 'green') {\n        winHandler(pair.bodyB.label);\n        resetWorld(world, engine, render, runner);\n      }\n    });\n    const startPlayer = createPlayer(\"Startplayer\");\n    Matter.Composite.add(world, [startPlayer]);\n  }\n  function createPlayer(label, profilePic) {\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight / 2, 10, 10, {\n      isStatic: true,\n      render: {\n        sprite: {\n          texture: bombImage,\n          xScale: 0.1,\n          yScale: 0.1\n        }\n      }\n    }); // bomb\n    const player = Matter.Bodies.rectangle(12, canvasHeight / 2, 20, 20, {\n      frictionAir: 0.03,\n      density: 0.3,\n      friction: 0.8,\n      label: label,\n      collisionFilter: {\n        mask: 0x0001\n      } // Should be able to hit each other\n      //render: {sprite: {texture: testProfilePic, xScale: 0.04, yScale: 0.04}} // uncomment this for profile pic\n    });\n    return player;\n  }\n  function spawnPlayer() {\n    const player = createPlayer(Math.random());\n    playSound(popup, 0.25);\n    Matter.Composite.add(world, [player]);\n  }\n  function move(username) {\n    const allBodies = Matter.Composite.allBodies(world);\n    const randomIndex = Math.floor(Math.random() * (allBodies.length - 4)) + 4;\n    const randomPlayer = allBodies[randomIndex];\n    /*\n    const foundPlayer = allBodies.find(player => player.label === username);\n    if (foundPlayer) {\n      Matter.Body.applyForce(foundPlayer, foundPlayer.position, { x: 0.5, y: 0 })\n    } else {\n      console.log(\"Object not found with name:\", username);\n    }\n    */\n    playSound(footstep);\n    Matter.Body.applyForce(randomPlayer, randomPlayer.position, {\n      x: 0.2,\n      y: 0\n    });\n  }\n  async function spawnBomb() {\n    const randomX = Math.floor(Math.random() * (canvasWidth - 100 + 1)) + 100;\n    const randomY = Math.floor(Math.random() * (canvasHeight - 0 + 1)) + 0;\n    const bomb = Matter.Bodies.rectangle(randomX, randomY, 10, 10, {\n      isStatic: true,\n      render: {\n        sprite: {\n          texture: bombImage,\n          xScale: 0.1,\n          yScale: 0.1\n        }\n      }\n    });\n    Matter.Composite.add(world, [bomb]);\n    playSound(ding);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    playSound(explosion, 0.25);\n    Matter.Composite.remove(world, [bomb]);\n    explode(bomb.position);\n    console.log(bomb.position);\n  }\n\n  // Creates consequense of blast radius\n  function explode(bombPosition) {\n    const allBodies = Matter.Composite.allBodies(world);\n    allBodies.forEach(player => {\n      if (player.label === 'Rectangle Body') {\n        // should only affect players\n        return;\n      }\n      const xDistanceToBomb = bombPosition.x - player.position.x;\n      const yDistanceToBomb = bombPosition.y - player.position.y;\n      //const bigDistance = 120\n      //const medDistance = 80\n      //const lowDistance = 20\n      // later: check if they are safe from blast. If they have bought safety. Could also add effect on y-axis\n      if (xDistanceToBomb < 0 && xDistanceToBomb > -120) {\n        // The player has passed the bomb\n        // if -y do something else if y do something\n        Matter.Body.applyForce(player, player.position, {\n          x: 1,\n          y: 0\n        });\n      }\n      if (Math.abs(xDistanceToBomb) < 20 && Math.abs(xDistanceToBomb) >= 0 && Math.abs(yDistanceToBomb) < 20 && Math.abs(yDistanceToBomb) >= 0) {\n        // player dies\n        Matter.Composite.remove(world, [player]);\n      } else if (xDistanceToBomb > 0 && xDistanceToBomb <= 80) {\n        // gets a blast\n        Matter.Body.applyForce(player, player.position, {\n          x: -2,\n          y: 0\n        });\n      } else if (xDistanceToBomb > 80 && xDistanceToBomb <= 120) {\n        // gets minor blast\n        Matter.Body.applyForce(player, player.position, {\n          x: -1,\n          y: 0\n        });\n      }\n      /*\n      if (yDistanceToBomb > 0 && yDistanceToBomb < 80 && Math.abs(xDistanceToBomb) < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: -1 })\n      } else if (yDistanceToBomb < 0 && yDistanceToBomb > -80 && Math.abs(xDistanceToBomb) < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: 1 })\n      }\n      */\n    });\n  }\n  function winHandler(winnerUsername) {\n    setLatestWinner(winnerUsername);\n    setShowWinner(true);\n    setConfetti(true);\n    setGameHaStarted(false);\n    // Increment points or add the person as a winner\n    const newArray = winners;\n    const playerIndex = winners.findIndex(winner => winner.label === winnerUsername);\n    if (playerIndex !== -1) {\n      newArray[playerIndex].points++;\n    } else {\n      newArray.push({\n        label: winnerUsername,\n        points: 1\n      });\n    }\n    setWinners(newArray);\n  }\n  function resetWorld(world, engine, render, runner) {\n    Matter.World.clear(world);\n    Matter.Engine.clear(engine);\n    Matter.Render.stop(render);\n    Matter.Runner.stop(runner);\n    Matter.Events.off(engine, 'collisionStart');\n    render.canvas.remove();\n    render.canvas = null;\n    render.context = null;\n    createGame();\n  }\n  function playSound(file, volume = 1) {\n    const audio = new Audio(file);\n    audio.volume = volume;\n    audio.play();\n  }\n  useEffect(() => {\n    //console.log(winners)\n  }, [winners]);\n  useEffect(() => {\n    createGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spawnPlayer,\n      children: \"Ny spiller\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        move(\"Startplayer\");\n      },\n      children: \"Boost\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spawnBomb,\n      children: \"Bomb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createGame,\n      children: \"Lav spil\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Leaderboard, {\n      winners: winners\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), showWinner && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Winner is \", latestWinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 22\n    }, this), confetti && /*#__PURE__*/_jsxDEV(ConfettiExplosion, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 67\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EFD4pmbrjt7UpP4RZazQ8pFEO1c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Matter","bombImage","explosion","ding","footstep","popup","useEffect","useState","ConfettiExplosion","Leaderboard","CountdownCircleTimer","Timer","jsxDEV","_jsxDEV","App","_s","showWinner","setShowWinner","latestWinner","setLatestWinner","gameHasStarted","setGameHaStarted","confetti","setConfetti","world","setWorld","winners","setWinners","canvasWidth","canvasHeight","createGame","engine","Engine","create","gravity","y","render","Render","element","document","body","options","width","height","showAngleIndicator","showCollisions","hasBounds","wireframes","background","run","runner","Runner","wallThichness","Composite","add","Bodies","rectangle","isStatic","fillStyle","collisionFilter","category","Events","on","event","pairs","pair","bodyA","winHandler","bodyB","label","resetWorld","startPlayer","createPlayer","profilePic","sprite","texture","xScale","yScale","player","frictionAir","density","friction","mask","spawnPlayer","Math","random","playSound","move","username","allBodies","randomIndex","floor","length","randomPlayer","Body","applyForce","position","x","spawnBomb","randomX","randomY","bomb","Promise","resolve","setTimeout","remove","explode","console","log","bombPosition","forEach","xDistanceToBomb","yDistanceToBomb","abs","winnerUsername","newArray","playerIndex","findIndex","winner","points","push","World","clear","stop","off","canvas","context","file","volume","audio","Audio","play","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gustavnielsen/Documents/Kode.nosync/tiktokgame/src/App.js"],"sourcesContent":["import './App.css';\nimport Matter from 'matter-js';\nimport bombImage from './assets/2dbomb.png'\n//import testProfilePic from './assets/profilepicture.jpg'\nimport explosion from './assets/explosion.wav';\nimport ding from './assets/ding.mp3'\nimport footstep from './assets/footstep.wav'\nimport popup from './assets/popup.wav'\nimport { useEffect, useState } from 'react';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport Leaderboard from './components/Leaderboard';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport Timer from './components/Timer';\n// spil minecraft soundtrack\n// elevenlabs til lyd. D-Id til video. Måske bruge heygen. \n// Når folk joiner brug https://responsivevoice.org/\n\nfunction App() {\n  //const video = require('./assets/Game_starting_soon.mp4')\n  const [showWinner, setShowWinner] = useState(false)\n  const [latestWinner, setLatestWinner] = useState('not found')\n  const [gameHasStarted, setGameHaStarted] = useState(false)\n  const [confetti, setConfetti] = useState(false)\n  const [world, setWorld] = useState()\n  const [winners, setWinners] = useState([])\n\n  const canvasWidth = 200\n  const canvasHeight = 1000\n\n  function createGame() {\n    const engine = Matter.Engine.create()\n    engine.gravity.y = 0\n    const world = engine.world\n    setWorld(world)\n    const render = Matter.Render.create({\n      element: document.body,\n      engine: engine,\n      options: {\n        width: canvasWidth,\n        height: canvasHeight,\n        showAngleIndicator: true,\n        showCollisions: true,\n        hasBounds: true,\n        wireframes: false,\n        background: '#fff'\n      }\n    });\n\n    Matter.Render.run(render);\n\n    // create runner\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    const wallThichness = 1\n    Matter.Composite.add(world, [\n      // walls - Created with (xpos, ypos, width, height)\n      Matter.Bodies.rectangle(canvasWidth / 2, 0, canvasWidth, wallThichness, { isStatic: true }), // Top\n      Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight, canvasWidth, wallThichness, { isStatic: true }), // Bottom\n      Matter.Bodies.rectangle(0, canvasHeight / 2, wallThichness, canvasHeight, { isStatic: true }), // Left\n      Matter.Bodies.rectangle(0, canvasHeight / 2, 50, canvasHeight, { isStatic: true, render: { fillStyle: \"grey\" }, collisionFilter: { category: 0x0002 } }), // Start object. Up to 32 different collision categories. 0x0001 is default\n      Matter.Bodies.rectangle(canvasWidth, canvasHeight / 2, 50, canvasHeight, { isStatic: true, render: { fillStyle: \"green\" } }) // Right - Finish line. \n    ]);\n    // checking collision on finish line\n    Matter.Events.on(engine, 'collisionStart', function (event) {\n      const pairs = event.pairs;\n      // change object colours to show those starting a collision\n      var pair = pairs[0];\n      if (pair.bodyA.render.fillStyle === 'green') {\n        winHandler(pair.bodyB.label)\n        resetWorld(world, engine, render, runner)\n      }\n    });\n\n    const startPlayer = createPlayer(\"Startplayer\")\n    Matter.Composite.add(world, [startPlayer])\n  }\n\n  function createPlayer(label, profilePic) {\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight / 2, 10, 10, { isStatic: true, render: { sprite: { texture: bombImage, xScale: 0.1, yScale: 0.1 } } }) // bomb\n    const player = Matter.Bodies.rectangle(12, canvasHeight / 2, 20, 20,\n      {\n        frictionAir: 0.03,\n        density: 0.3,\n        friction: 0.8,\n        label: label,\n        collisionFilter: { mask: 0x0001, }, // Should be able to hit each other\n        //render: {sprite: {texture: testProfilePic, xScale: 0.04, yScale: 0.04}} // uncomment this for profile pic\n      }\n    )\n    return player\n  }\n\n  function spawnPlayer() {\n    const player = createPlayer(Math.random())\n    playSound(popup, 0.25)\n    Matter.Composite.add(world, [player])\n  }\n\n  function move(username) {\n    const allBodies = Matter.Composite.allBodies(world)\n    const randomIndex = Math.floor(Math.random() * (allBodies.length - 4)) + 4;\n    const randomPlayer = allBodies[randomIndex]\n    /*\n    const foundPlayer = allBodies.find(player => player.label === username);\n    if (foundPlayer) {\n      Matter.Body.applyForce(foundPlayer, foundPlayer.position, { x: 0.5, y: 0 })\n    } else {\n      console.log(\"Object not found with name:\", username);\n    }\n    */\n    playSound(footstep)\n    Matter.Body.applyForce(randomPlayer, randomPlayer.position, { x: 0.2, y: 0 })\n  }\n\n  async function spawnBomb() {\n    const randomX = Math.floor(Math.random() * (canvasWidth - 100 + 1)) + 100;\n    const randomY = Math.floor(Math.random() * (canvasHeight - 0 + 1)) + 0;\n    const bomb = Matter.Bodies.rectangle(randomX, randomY, 10, 10, { isStatic: true, render: { sprite: { texture: bombImage, xScale: 0.1, yScale: 0.1 } } })\n    Matter.Composite.add(world, [bomb])\n    playSound(ding)\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    playSound(explosion, 0.25)\n    Matter.Composite.remove(world, [bomb])\n    explode(bomb.position)\n    console.log(bomb.position)\n  }\n\n  // Creates consequense of blast radius\n  function explode(bombPosition) {\n    const allBodies = Matter.Composite.allBodies(world)\n    allBodies.forEach(player => {\n      if (player.label === 'Rectangle Body') { // should only affect players\n        return\n      }\n      const xDistanceToBomb = bombPosition.x - player.position.x\n      const yDistanceToBomb = bombPosition.y - player.position.y\n      //const bigDistance = 120\n      //const medDistance = 80\n      //const lowDistance = 20\n      // later: check if they are safe from blast. If they have bought safety. Could also add effect on y-axis\n      if (xDistanceToBomb < 0 && xDistanceToBomb > -120) { // The player has passed the bomb\n        // if -y do something else if y do something\n        Matter.Body.applyForce(player, player.position, { x: 1, y: 0 })\n      }\n      if (Math.abs(xDistanceToBomb) < 20 && Math.abs(xDistanceToBomb) >= 0 && Math.abs(yDistanceToBomb) < 20 && Math.abs(yDistanceToBomb) >=0) { // player dies\n        Matter.Composite.remove(world, [player])\n      } else if (xDistanceToBomb > 0 && xDistanceToBomb <= 80) { // gets a blast\n        Matter.Body.applyForce(player, player.position, { x: -2, y: 0 })\n      } else if (xDistanceToBomb > 80 && xDistanceToBomb <= 120) { // gets minor blast\n        Matter.Body.applyForce(player, player.position, { x: -1, y: 0 })\n      }\n      /*\n      if (yDistanceToBomb > 0 && yDistanceToBomb < 80 && Math.abs(xDistanceToBomb) < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: -1 })\n      } else if (yDistanceToBomb < 0 && yDistanceToBomb > -80 && Math.abs(xDistanceToBomb) < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: 1 })\n      }\n      */\n    });\n  }\n\n  function winHandler(winnerUsername) {\n    setLatestWinner(winnerUsername)\n    setShowWinner(true)\n    setConfetti(true)\n    setGameHaStarted(false)\n    // Increment points or add the person as a winner\n    const newArray = winners\n    const playerIndex = winners.findIndex(winner => winner.label === winnerUsername);\n    if (playerIndex !== -1) {\n      newArray[playerIndex].points++\n    } else {\n      newArray.push({ label: winnerUsername, points: 1 })\n    }\n    setWinners(newArray)\n  }\n\n  function resetWorld(world, engine, render, runner) {\n    Matter.World.clear(world);\n    Matter.Engine.clear(engine);\n    Matter.Render.stop(render);\n    Matter.Runner.stop(runner);\n    Matter.Events.off(engine, 'collisionStart')\n    render.canvas.remove();\n    render.canvas = null;\n    render.context = null;\n    createGame()\n  }\n\n  function playSound(file, volume = 1) {\n    const audio = new Audio(file)\n    audio.volume = volume\n    audio.play()\n  }\n\n  useEffect(() => {\n    //console.log(winners)\n  }, [winners])\n\n  useEffect(() => {\n    createGame()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <button onClick={spawnPlayer}>Ny spiller</button>\n      <button onClick={() => { move(\"Startplayer\") }}>Boost</button>\n      <button onClick={spawnBomb}>Bomb</button>\n      <button onClick={createGame}>Lav spil</button>\n      {/*<button onClick={() => { setConfetti(true) }}><>{confetti && <ConfettiExplosion />}</>Confetti</button>*/}\n      <Leaderboard winners={winners}></Leaderboard>\n      {/*<video src={video} type=\"video/mp4\" autoPlay width={300} height={300}></video>*/}\n      {showWinner && <p>Winner is {latestWinner}</p>}{confetti && <ConfettiExplosion />}{/*showWinner && <ComponentToShow />*/}\n      {/*<Timer duration={10}></Timer>*/}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}