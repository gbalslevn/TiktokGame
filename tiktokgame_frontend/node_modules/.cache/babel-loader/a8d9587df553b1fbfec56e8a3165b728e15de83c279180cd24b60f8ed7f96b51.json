{"ast":null,"code":"var _jsxFileName = \"/Users/gustavnielsen/Documents/Kode.nosync/tiktokgame/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Matter from 'matter-js';\nimport bombImage from './assets/2dbomb.png';\n//import testProfilePic from './assets/profilepicture.jpg'\nimport explosion from './assets/explosion.wav';\nimport ding from './assets/ding.mp3';\nimport footstep from './assets/footstep.wav';\nimport popup from './assets/popup.wav';\nimport { useState } from 'react';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport Leaderboard from './components/Leaderboard';\n// spil minecraft soundtrack\n// elevenlabs til lyd. D-Id til video. Måske bruge heygen. \n// Når folk joiner brug https://responsivevoice.org/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //const video = require('./assets/Game_starting_soon.mp4')\n  const [showWinner, setShowWinner] = useState(false);\n  const [latestWinner, setLatestWinner] = useState('not found');\n  const [confetti, setConfetti] = useState(false);\n  const engine = Matter.Engine.create();\n  engine.gravity.y = 0;\n  const world = engine.world;\n  const canvasWidth = 800;\n  const canvasHeight = 200;\n  /*\n    const render = Matter.Render.create({\n    element: document.body,\n    engine: engine,\n    options: {\n      width: canvasWidth,\n      height: canvasHeight,\n      showAngleIndicator: true,\n      showCollisions: true,\n      hasBounds: true,\n      wireframes: false,\n      background: '#fff'\n    }\n  });\n   Matter.Render.run(render);\n   // create runner\n  const runner = Matter.Runner.create();\n  Matter.Runner.run(runner, engine);\n   const wallThichness = 1\n  Matter.Composite.add(world, [\n    // walls - Created with (xpos, ypos, width, height)\n    Matter.Bodies.rectangle(canvasWidth / 2, 0, canvasWidth, wallThichness, { isStatic: true }), // Top\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight, canvasWidth, wallThichness, { isStatic: true }), // Bottom\n    Matter.Bodies.rectangle(0, canvasHeight / 2, wallThichness, canvasHeight, { isStatic: true }), // Left\n    Matter.Bodies.rectangle(0, canvasHeight / 2, 50, canvasHeight, { isStatic: true, render: { fillStyle: \"grey\" }, collisionFilter: { category: 0x0002 } }), // Start object. Up to 32 different collision categories. 0x0001 is default\n    Matter.Bodies.rectangle(canvasWidth, canvasHeight / 2, 50, canvasWidth, { isStatic: true, render: { fillStyle: \"green\" } }) // Right - Finish line. \n  ]);\n   // checking collision on finish line\n  Matter.Events.on(engine, 'collisionStart', function (event) {\n    const pairs = event.pairs;\n    console.log(pairs.length)\n    // change object colours to show those starting a collision\n    var pair = pairs[0];\n    if (pair.bodyA.render.fillStyle === 'green') {\n      pair.bodyA.render.fillStyle = '#333';\n      pair.bodyB.render.fillStyle = '#333';\n      //setLatestWinner(pair.bodyB.label)\n      setShowWinner(true)\n      //setConfetti(true)\n    }\n  });\n   const startPlayer = createPlayer(\"Startplayer\")\n  Matter.Composite.add(world, [startPlayer])\n   */\n\n  function createPlayer(label, profilePic) {\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight / 2, 10, 10, {\n      isStatic: true,\n      render: {\n        sprite: {\n          texture: bombImage,\n          xScale: 0.1,\n          yScale: 0.1\n        }\n      }\n    }); // bomb\n    const player = Matter.Bodies.rectangle(12, render.canvas.height / 2, 20, 20, {\n      frictionAir: 0.03,\n      density: 0.3,\n      friction: 0.8,\n      label: label,\n      collisionFilter: {\n        mask: 0x0001\n      } // Should be able to hit each other\n      //render: {sprite: {texture: testProfilePic, xScale: 0.04, yScale: 0.04}} // uncomment this for profile pic\n    });\n    return player;\n  }\n  async function spawnBomb() {\n    const randomX = Math.floor(Math.random() * (canvasWidth - 100 + 1)) + 100;\n    const randomY = Math.floor(Math.random() * (canvasHeight - 0 + 1)) + 0;\n    const bomb = Matter.Bodies.rectangle(randomX, randomY, 10, 10, {\n      isStatic: true,\n      render: {\n        sprite: {\n          texture: bombImage,\n          xScale: 0.1,\n          yScale: 0.1\n        }\n      }\n    });\n    Matter.Composite.add(world, [bomb]);\n    playSound(ding);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    playSound(explosion, 0.25);\n    Matter.Composite.remove(world, [bomb]);\n    explode(bomb.position);\n  }\n\n  // Creates consequense of blast radius\n  function explode(bombPosition) {\n    const allBodies = Matter.Composite.allBodies(world);\n    allBodies.forEach(player => {\n      if (player.label === 'Rectangle Body') {\n        // should only affect players\n        return;\n      }\n      const distanceToBomb = bombPosition.x - player.position.x;\n      // later: check if they are safe from blast. If they have bought safety. Could also add effect on y-axis\n      if (distanceToBomb < 0) {\n        // The player has passed the bomb\n        Matter.Body.applyForce(player, player.position, {\n          x: 1,\n          y: 0\n        });\n      }\n      if (distanceToBomb < 20 && distanceToBomb > 0) {\n        // player dies\n        Matter.Composite.remove(world, [player]);\n      } else if (distanceToBomb > 20 && distanceToBomb < 80) {\n        // gets a blast\n        Matter.Body.applyForce(player, player.position, {\n          x: -2,\n          y: 0\n        });\n      } else if (distanceToBomb > 100 && distanceToBomb < 120) {\n        // gets minor blast\n        Matter.Body.applyForce(player, player.position, {\n          x: -1,\n          y: 0\n        });\n      }\n      const yDistanceToBomb = bombPosition.y - player.position.y;\n      if (yDistanceToBomb > 10 && distanceToBomb < 120) {\n        Matter.Body.applyForce(player, player.position, {\n          x: 0,\n          y: -1\n        });\n      } else if (yDistanceToBomb < -10 && distanceToBomb < 120) {\n        Matter.Body.applyForce(player, player.position, {\n          x: 0,\n          y: 1\n        });\n      }\n    });\n  }\n  function playSound(file, volume = 1) {\n    const audio = new Audio(file);\n    audio.volume = volume;\n    audio.play();\n  }\n  function spawnPlayer() {\n    console.log(\"Player added\");\n    const player = createPlayer(Math.random());\n    playSound(popup, 0.25);\n    Matter.Composite.add(world, [player]);\n  }\n  function move(username) {\n    //Matter.Body.applyForce(startPlayer, {\n    //  x: startPlayer.position.x,\n    //  y: startPlayer.position.y\n    //}, { x: 0.5, y: 0 })\n    const allBodies = Matter.Composite.allBodies(world);\n    const randomIndex = Math.floor(Math.random() * (allBodies.length - 4)) + 4;\n    const randomPlayer = allBodies[randomIndex];\n    /*\n    const foundPlayer = allBodies.find(player => player.label === username);\n    if (foundPlayer) {\n      Matter.Body.applyForce(foundPlayer, foundPlayer.position, { x: 0.5, y: 0 })\n    } else {\n      console.log(\"Object not found with name:\", username);\n    }\n    */\n    playSound(footstep);\n    Matter.Body.applyForce(randomPlayer, randomPlayer.position, {\n      x: 1,\n      y: 0\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spawnPlayer,\n      children: \"Ny spiller\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        move(\"Startplayer\");\n      },\n      children: \"Boost\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spawnBomb,\n      children: \"Bomb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Leaderboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Xmr5ZKHEeq3Zil2RcaYd0hL1zR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Matter","bombImage","explosion","ding","footstep","popup","useState","ConfettiExplosion","Leaderboard","jsxDEV","_jsxDEV","App","_s","showWinner","setShowWinner","latestWinner","setLatestWinner","confetti","setConfetti","engine","Engine","create","gravity","y","world","canvasWidth","canvasHeight","createPlayer","label","profilePic","Bodies","rectangle","isStatic","render","sprite","texture","xScale","yScale","player","canvas","height","frictionAir","density","friction","collisionFilter","mask","spawnBomb","randomX","Math","floor","random","randomY","bomb","Composite","add","playSound","Promise","resolve","setTimeout","remove","explode","position","bombPosition","allBodies","forEach","distanceToBomb","x","Body","applyForce","yDistanceToBomb","file","volume","audio","Audio","play","spawnPlayer","console","log","move","username","randomIndex","length","randomPlayer","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gustavnielsen/Documents/Kode.nosync/tiktokgame/src/App.js"],"sourcesContent":["import './App.css';\nimport Matter from 'matter-js';\nimport bombImage from './assets/2dbomb.png'\n//import testProfilePic from './assets/profilepicture.jpg'\nimport explosion from './assets/explosion.wav';\nimport ding from './assets/ding.mp3'\nimport footstep from './assets/footstep.wav'\nimport popup from './assets/popup.wav'\nimport { useState } from 'react';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport Leaderboard from './components/Leaderboard';\n// spil minecraft soundtrack\n// elevenlabs til lyd. D-Id til video. Måske bruge heygen. \n// Når folk joiner brug https://responsivevoice.org/\n\nfunction App() {\n  //const video = require('./assets/Game_starting_soon.mp4')\n  const [showWinner, setShowWinner] = useState(false)\n  const [latestWinner, setLatestWinner] = useState('not found')\n  const [confetti, setConfetti] = useState(false)\n  const engine = Matter.Engine.create()\n  engine.gravity.y = 0\n  const world = engine.world\n\n  const canvasWidth = 800\n  const canvasHeight = 200\n  /*\n\n\n  const render = Matter.Render.create({\n    element: document.body,\n    engine: engine,\n    options: {\n      width: canvasWidth,\n      height: canvasHeight,\n      showAngleIndicator: true,\n      showCollisions: true,\n      hasBounds: true,\n      wireframes: false,\n      background: '#fff'\n    }\n  });\n\n  Matter.Render.run(render);\n\n  // create runner\n  const runner = Matter.Runner.create();\n  Matter.Runner.run(runner, engine);\n\n  const wallThichness = 1\n  Matter.Composite.add(world, [\n    // walls - Created with (xpos, ypos, width, height)\n    Matter.Bodies.rectangle(canvasWidth / 2, 0, canvasWidth, wallThichness, { isStatic: true }), // Top\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight, canvasWidth, wallThichness, { isStatic: true }), // Bottom\n    Matter.Bodies.rectangle(0, canvasHeight / 2, wallThichness, canvasHeight, { isStatic: true }), // Left\n    Matter.Bodies.rectangle(0, canvasHeight / 2, 50, canvasHeight, { isStatic: true, render: { fillStyle: \"grey\" }, collisionFilter: { category: 0x0002 } }), // Start object. Up to 32 different collision categories. 0x0001 is default\n    Matter.Bodies.rectangle(canvasWidth, canvasHeight / 2, 50, canvasWidth, { isStatic: true, render: { fillStyle: \"green\" } }) // Right - Finish line. \n  ]);\n\n  // checking collision on finish line\n  Matter.Events.on(engine, 'collisionStart', function (event) {\n    const pairs = event.pairs;\n    console.log(pairs.length)\n    // change object colours to show those starting a collision\n    var pair = pairs[0];\n    if (pair.bodyA.render.fillStyle === 'green') {\n      pair.bodyA.render.fillStyle = '#333';\n      pair.bodyB.render.fillStyle = '#333';\n      //setLatestWinner(pair.bodyB.label)\n      setShowWinner(true)\n      //setConfetti(true)\n    }\n  });\n\n  const startPlayer = createPlayer(\"Startplayer\")\n  Matter.Composite.add(world, [startPlayer])\n\n  */\n\n  function createPlayer(label, profilePic) {\n    Matter.Bodies.rectangle(canvasWidth / 2, canvasHeight / 2, 10, 10, { isStatic: true, render: { sprite: { texture: bombImage, xScale: 0.1, yScale: 0.1 } } }) // bomb\n    const player = Matter.Bodies.rectangle(12, render.canvas.height / 2, 20, 20,\n      {\n        frictionAir: 0.03,\n        density: 0.3,\n        friction: 0.8,\n        label: label,\n        collisionFilter: { mask: 0x0001, }, // Should be able to hit each other\n        //render: {sprite: {texture: testProfilePic, xScale: 0.04, yScale: 0.04}} // uncomment this for profile pic\n      }\n    )\n    return player\n  }\n\n  async function spawnBomb() {\n    const randomX = Math.floor(Math.random() * (canvasWidth - 100 + 1)) + 100; \n    const randomY = Math.floor(Math.random() * (canvasHeight - 0 + 1)) + 0; \n    const bomb = Matter.Bodies.rectangle(randomX, randomY, 10, 10, { isStatic: true, render: { sprite: { texture: bombImage, xScale: 0.1, yScale: 0.1 } } })\n    Matter.Composite.add(world, [bomb])\n    playSound(ding)\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    playSound(explosion, 0.25)\n    Matter.Composite.remove(world, [bomb])\n    explode(bomb.position)\n  }\n\n  // Creates consequense of blast radius\n  function explode(bombPosition) {\n    const allBodies = Matter.Composite.allBodies(world)\n    allBodies.forEach(player => {\n      if (player.label === 'Rectangle Body') { // should only affect players\n        return\n      }\n      const distanceToBomb = bombPosition.x - player.position.x\n      // later: check if they are safe from blast. If they have bought safety. Could also add effect on y-axis\n      if (distanceToBomb < 0) { // The player has passed the bomb\n        Matter.Body.applyForce(player, player.position, { x: 1, y: 0 })\n      }\n      if (distanceToBomb < 20 && distanceToBomb > 0) { // player dies\n        Matter.Composite.remove(world, [player])\n      } else if (distanceToBomb > 20 && distanceToBomb < 80) { // gets a blast\n        Matter.Body.applyForce(player, player.position, { x: -2, y: 0 })\n      } else if (distanceToBomb > 100 && distanceToBomb < 120) { // gets minor blast\n        Matter.Body.applyForce(player, player.position, { x: -1, y: 0 })\n      }\n      const yDistanceToBomb = bombPosition.y - player.position.y\n      if (yDistanceToBomb > 10 && distanceToBomb < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: -1 })\n      } else if (yDistanceToBomb < -10 && distanceToBomb < 120) {\n        Matter.Body.applyForce(player, player.position, { x: 0, y: 1 })\n      }\n    });\n  }\n\n  function playSound(file, volume = 1) {\n    const audio = new Audio(file)\n    audio.volume = volume\n    audio.play()\n  }\n\n  function spawnPlayer() {\n    console.log(\"Player added\")\n    const player = createPlayer(Math.random())\n    playSound(popup, 0.25)\n    Matter.Composite.add(world, [player])\n  }\n\n  function move(username) {\n    //Matter.Body.applyForce(startPlayer, {\n    //  x: startPlayer.position.x,\n    //  y: startPlayer.position.y\n    //}, { x: 0.5, y: 0 })\n    const allBodies = Matter.Composite.allBodies(world)\n    const randomIndex = Math.floor(Math.random() * (allBodies.length - 4)) + 4;\n    const randomPlayer = allBodies[randomIndex]\n    /*\n    const foundPlayer = allBodies.find(player => player.label === username);\n    if (foundPlayer) {\n      Matter.Body.applyForce(foundPlayer, foundPlayer.position, { x: 0.5, y: 0 })\n    } else {\n      console.log(\"Object not found with name:\", username);\n    }\n    */\n    playSound(footstep)\n    Matter.Body.applyForce(randomPlayer, randomPlayer.position, { x: 1, y: 0 })\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={spawnPlayer}>Ny spiller</button>\n      <button onClick={() => { move(\"Startplayer\") }}>Boost</button>\n      <button onClick={spawnBomb}>Bomb</button>\n      {/*<button onClick={() => { setConfetti(true) }}><>{confetti && <ConfettiExplosion />}</>Confetti</button>*/}\n      <Leaderboard></Leaderboard>\n      {/*<video src={video} type=\"video/mp4\" autoPlay width={300} height={300}></video>*/}\n      {/*{showWinner && <p>Winner is {latestWinner}</p>}{/*showWinner && <ComponentToShow />*/}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}