{"ast":null,"code":"\"use strict\";\n\nconst protobufjs = require('protobufjs');\nconst util = require('node:util');\nconst zlib = require('node:zlib');\nconst unzip = util.promisify(zlib.unzip);\nlet tiktokSchemaPath = require.resolve('../proto/tiktokSchema.proto');\nlet tiktokSchema = null;\nlet config = {\n  skipMessageTypes: []\n}; // Load & cache schema\n\nfunction loadTikTokSchema() {\n  if (!tiktokSchema) {\n    tiktokSchema = protobufjs.loadSync(tiktokSchemaPath);\n  }\n}\nfunction serializeMessage(protoName, obj) {\n  loadTikTokSchema();\n  return tiktokSchema.lookupType(`TikTok.${protoName}`).encode(obj).finish();\n}\nfunction deserializeMessage(protoName, binaryMessage) {\n  loadTikTokSchema();\n  var webcastData = tiktokSchema.lookupType(`TikTok.${protoName}`).decode(binaryMessage);\n  if (protoName === 'WebcastResponse' && Array.isArray(webcastData.messages)) {\n    // Contains different object structures depending on the type field\n    webcastData.messages.forEach(message => {\n      if (config.skipMessageTypes.includes(message.type)) {\n        return;\n      }\n      switch (message.type) {\n        case 'WebcastControlMessage':\n        case 'WebcastRoomUserSeqMessage':\n        case 'WebcastChatMessage':\n        case 'WebcastMemberMessage':\n        case 'WebcastGiftMessage':\n        case 'WebcastSocialMessage':\n        case 'WebcastLikeMessage':\n        case 'WebcastQuestionNewMessage':\n        case 'WebcastLinkMicBattle':\n        case 'WebcastLinkMicArmies':\n        case 'WebcastLiveIntroMessage':\n        case 'WebcastEmoteChatMessage':\n        case 'WebcastEnvelopeMessage':\n        case 'WebcastSubNotifyMessage':\n          message.decodedData = tiktokSchema.lookupType(`TikTok.${message.type}`).decode(message.binary);\n          break;\n      }\n    });\n  }\n  return webcastData;\n}\nasync function deserializeWebsocketMessage(binaryMessage) {\n  // Websocket messages are in an container which contains additional data\n  // Message type 'msg' represents a normal WebcastResponse\n  let decodedWebsocketMessage = deserializeMessage('WebcastWebsocketMessage', binaryMessage);\n  if (decodedWebsocketMessage.type === 'msg') {\n    let binary = decodedWebsocketMessage.binary; // Decompress binary (if gzip compressed)\n    // https://www.rfc-editor.org/rfc/rfc1950.html\n\n    if (binary && binary.length > 2 && binary[0] === 0x1f && binary[1] === 0x8b && binary[2] === 0x08) {\n      decodedWebsocketMessage.binary = await unzip(binary);\n    }\n    decodedWebsocketMessage.webcastResponse = deserializeMessage('WebcastResponse', decodedWebsocketMessage.binary);\n  }\n  return decodedWebsocketMessage;\n}\nmodule.exports = {\n  serializeMessage,\n  deserializeMessage,\n  deserializeWebsocketMessage,\n  config\n};","map":{"version":3,"names":["protobufjs","require","util","zlib","unzip","promisify","tiktokSchemaPath","resolve","tiktokSchema","config","skipMessageTypes","loadTikTokSchema","loadSync","serializeMessage","protoName","obj","lookupType","encode","finish","deserializeMessage","binaryMessage","webcastData","decode","Array","isArray","messages","forEach","message","includes","type","decodedData","binary","deserializeWebsocketMessage","decodedWebsocketMessage","length","webcastResponse","module","exports"],"sources":["/Users/gustavnielsen/Documents/Kode.nosync/tiktokgame/node_modules/tiktok-live-connector/dist/lib/webcastProtobuf.js"],"sourcesContent":["\"use strict\";\n\nconst protobufjs = require('protobufjs');\n\nconst util = require('node:util');\n\nconst zlib = require('node:zlib');\n\nconst unzip = util.promisify(zlib.unzip);\n\nlet tiktokSchemaPath = require.resolve('../proto/tiktokSchema.proto');\n\nlet tiktokSchema = null;\nlet config = {\n  skipMessageTypes: []\n}; // Load & cache schema\n\nfunction loadTikTokSchema() {\n  if (!tiktokSchema) {\n    tiktokSchema = protobufjs.loadSync(tiktokSchemaPath);\n  }\n}\n\nfunction serializeMessage(protoName, obj) {\n  loadTikTokSchema();\n  return tiktokSchema.lookupType(`TikTok.${protoName}`).encode(obj).finish();\n}\n\nfunction deserializeMessage(protoName, binaryMessage) {\n  loadTikTokSchema();\n  var webcastData = tiktokSchema.lookupType(`TikTok.${protoName}`).decode(binaryMessage);\n\n  if (protoName === 'WebcastResponse' && Array.isArray(webcastData.messages)) {\n    // Contains different object structures depending on the type field\n    webcastData.messages.forEach(message => {\n      if (config.skipMessageTypes.includes(message.type)) {\n        return;\n      }\n\n      switch (message.type) {\n        case 'WebcastControlMessage':\n        case 'WebcastRoomUserSeqMessage':\n        case 'WebcastChatMessage':\n        case 'WebcastMemberMessage':\n        case 'WebcastGiftMessage':\n        case 'WebcastSocialMessage':\n        case 'WebcastLikeMessage':\n        case 'WebcastQuestionNewMessage':\n        case 'WebcastLinkMicBattle':\n        case 'WebcastLinkMicArmies':\n        case 'WebcastLiveIntroMessage':\n        case 'WebcastEmoteChatMessage':\n        case 'WebcastEnvelopeMessage':\n        case 'WebcastSubNotifyMessage':\n          message.decodedData = tiktokSchema.lookupType(`TikTok.${message.type}`).decode(message.binary);\n          break;\n      }\n    });\n  }\n\n  return webcastData;\n}\n\nasync function deserializeWebsocketMessage(binaryMessage) {\n  // Websocket messages are in an container which contains additional data\n  // Message type 'msg' represents a normal WebcastResponse\n  let decodedWebsocketMessage = deserializeMessage('WebcastWebsocketMessage', binaryMessage);\n\n  if (decodedWebsocketMessage.type === 'msg') {\n    let binary = decodedWebsocketMessage.binary; // Decompress binary (if gzip compressed)\n    // https://www.rfc-editor.org/rfc/rfc1950.html\n\n    if (binary && binary.length > 2 && binary[0] === 0x1f && binary[1] === 0x8b && binary[2] === 0x08) {\n      decodedWebsocketMessage.binary = await unzip(binary);\n    }\n\n    decodedWebsocketMessage.webcastResponse = deserializeMessage('WebcastResponse', decodedWebsocketMessage.binary);\n  }\n\n  return decodedWebsocketMessage;\n}\n\nmodule.exports = {\n  serializeMessage,\n  deserializeMessage,\n  deserializeWebsocketMessage,\n  config\n};"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AAExC,MAAMC,IAAI,GAAGD,OAAO,CAAC,WAAW,CAAC;AAEjC,MAAME,IAAI,GAAGF,OAAO,CAAC,WAAW,CAAC;AAEjC,MAAMG,KAAK,GAAGF,IAAI,CAACG,SAAS,CAACF,IAAI,CAACC,KAAK,CAAC;AAExC,IAAIE,gBAAgB,GAAGL,OAAO,CAACM,OAAO,CAAC,6BAA6B,CAAC;AAErE,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIC,MAAM,GAAG;EACXC,gBAAgB,EAAE;AACpB,CAAC,CAAC,CAAC;;AAEH,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,IAAI,CAACH,YAAY,EAAE;IACjBA,YAAY,GAAGR,UAAU,CAACY,QAAQ,CAACN,gBAAgB,CAAC;EACtD;AACF;AAEA,SAASO,gBAAgBA,CAACC,SAAS,EAAEC,GAAG,EAAE;EACxCJ,gBAAgB,CAAC,CAAC;EAClB,OAAOH,YAAY,CAACQ,UAAU,CAAE,UAASF,SAAU,EAAC,CAAC,CAACG,MAAM,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAAC;AAC5E;AAEA,SAASC,kBAAkBA,CAACL,SAAS,EAAEM,aAAa,EAAE;EACpDT,gBAAgB,CAAC,CAAC;EAClB,IAAIU,WAAW,GAAGb,YAAY,CAACQ,UAAU,CAAE,UAASF,SAAU,EAAC,CAAC,CAACQ,MAAM,CAACF,aAAa,CAAC;EAEtF,IAAIN,SAAS,KAAK,iBAAiB,IAAIS,KAAK,CAACC,OAAO,CAACH,WAAW,CAACI,QAAQ,CAAC,EAAE;IAC1E;IACAJ,WAAW,CAACI,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;MACtC,IAAIlB,MAAM,CAACC,gBAAgB,CAACkB,QAAQ,CAACD,OAAO,CAACE,IAAI,CAAC,EAAE;QAClD;MACF;MAEA,QAAQF,OAAO,CAACE,IAAI;QAClB,KAAK,uBAAuB;QAC5B,KAAK,2BAA2B;QAChC,KAAK,oBAAoB;QACzB,KAAK,sBAAsB;QAC3B,KAAK,oBAAoB;QACzB,KAAK,sBAAsB;QAC3B,KAAK,oBAAoB;QACzB,KAAK,2BAA2B;QAChC,KAAK,sBAAsB;QAC3B,KAAK,sBAAsB;QAC3B,KAAK,yBAAyB;QAC9B,KAAK,yBAAyB;QAC9B,KAAK,wBAAwB;QAC7B,KAAK,yBAAyB;UAC5BF,OAAO,CAACG,WAAW,GAAGtB,YAAY,CAACQ,UAAU,CAAE,UAASW,OAAO,CAACE,IAAK,EAAC,CAAC,CAACP,MAAM,CAACK,OAAO,CAACI,MAAM,CAAC;UAC9F;MACJ;IACF,CAAC,CAAC;EACJ;EAEA,OAAOV,WAAW;AACpB;AAEA,eAAeW,2BAA2BA,CAACZ,aAAa,EAAE;EACxD;EACA;EACA,IAAIa,uBAAuB,GAAGd,kBAAkB,CAAC,yBAAyB,EAAEC,aAAa,CAAC;EAE1F,IAAIa,uBAAuB,CAACJ,IAAI,KAAK,KAAK,EAAE;IAC1C,IAAIE,MAAM,GAAGE,uBAAuB,CAACF,MAAM,CAAC,CAAC;IAC7C;;IAEA,IAAIA,MAAM,IAAIA,MAAM,CAACG,MAAM,GAAG,CAAC,IAAIH,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MACjGE,uBAAuB,CAACF,MAAM,GAAG,MAAM3B,KAAK,CAAC2B,MAAM,CAAC;IACtD;IAEAE,uBAAuB,CAACE,eAAe,GAAGhB,kBAAkB,CAAC,iBAAiB,EAAEc,uBAAuB,CAACF,MAAM,CAAC;EACjH;EAEA,OAAOE,uBAAuB;AAChC;AAEAG,MAAM,CAACC,OAAO,GAAG;EACfxB,gBAAgB;EAChBM,kBAAkB;EAClBa,2BAA2B;EAC3BvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}